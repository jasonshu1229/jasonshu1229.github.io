(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{230:function(t,s,a){"use strict";a.r(s);var n=a(0),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"浏览器多进程、js单线程，eventloop的相爱相杀"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器多进程、js单线程，eventloop的相爱相杀"}},[t._v("#")]),t._v(" 浏览器多进程、JS单线程，EventLoop的相爱相杀")]),t._v(" "),a("h2",{attrs:{id:"引子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引子"}},[t._v("#")]),t._v(" 引子")]),t._v(" "),a("p",[t._v("几乎在每一本JS相关的书籍中，都会说JS是单线程的，JS是通过事件队列(Event Loop)的方式来实现异步回调的。 对很多初学JS的人来说，根本搞不清楚单线程的JS为什么拥有异步的能力，所以，我试图从进程、线程的角度来解释这个问题。\n"),a("br")]),t._v(" "),a("h2",{attrs:{id:"cpu"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cpu"}},[t._v("#")]),t._v(" CPU")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/23/16df8fefc9d56f17?w=517&h=335&f=png&s=92422",alt:""}}),t._v("\n计算机的核心是CPU，它承担了所有的计算任务。")]),t._v(" "),a("p",[t._v("它就像一座工厂，时刻在运行。")]),t._v(" "),a("h2",{attrs:{id:"进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[t._v("#")]),t._v(" 进程")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/23/16df90020c4f6b8a?w=603&h=428&f=png&s=182610",alt:""}}),t._v("\n假定工厂的电力有限，一次只能供给一个车间使用。\n也就是说，一个车间开工的时候，其他车间都必须停工。\n背后的含义就是，单个CPU一次只能运行一个任务。\n进程就好比工厂的车间，它代表CPU所能处理的单个任务。\n进程之间相互独立，任一时刻，CPU总是运行一个进程，其他进程处于非运行状态。\nCPU使用时间片轮转进度算法来实现同时运行多个\n"),a("font",{attrs:{color:"#dd0000",background:"black"}},[t._v("进程")]),a("br")],1),t._v(" "),a("h2",{attrs:{id:"cpu、进程、线程之间的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cpu、进程、线程之间的关系"}},[t._v("#")]),t._v(" CPU、进程、线程之间的关系")]),t._v(" "),a("p",[t._v("从上文我们已经简单了解了CPU、进程、线程，简单汇总一下")]),t._v(" "),a("ul",[a("li",[t._v("进程是cpu资源分配的最小单位（是能拥有资源和独立运行的最小单位）")]),t._v(" "),a("li",[t._v("线程是cpu调度的最小单位（线程是建立在进程的基础上的一次程序运行单位，一个进程中可以有多个线程）")]),t._v(" "),a("li",[t._v("单线程与多线程，都是指在一个进程内的单和多")])]),t._v(" "),a("h2",{attrs:{id:"浏览器是多进程的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器是多进程的"}},[t._v("#")]),t._v(" 浏览器是多进程的")]),t._v(" "),a("p",[t._v("我们已经知道了CPU、进程、线程之间的关系，对于计算机来说，每一个应用程序都是一个进程， 而每一个应用程序都会分别有很多的功能模块，这些功能模块实际上是通过子进程来实现的。 对于这种子进程的扩展方式，我们可以称这个应用程序是多进程的。\n"),a("br"),a("br"),t._v("\n而对于浏览器来说，浏览器就是多进程的，我在Chrome浏览器中打开了多个tab，然后打开mac中的活动监视器：\n"),a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/24/16dfd6e708b32865?w=694&h=258&f=png&s=163832",alt:""}}),t._v("\n如上图，我们可以看到一个Chrome浏览器启动了好多个进程。\n"),a("br"),t._v("\n总结一下：")]),t._v(" "),a("ul",[a("li",[t._v("浏览器是多进程的")]),t._v(" "),a("li",[t._v("每一个Tab页，都是一个独立的进程")])]),t._v(" "),a("h2",{attrs:{id:"浏览器包含了哪些进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器包含了哪些进程"}},[t._v("#")]),t._v(" 浏览器包含了哪些进程")]),t._v(" "),a("ul",[a("li",[t._v("主进程\n"),a("ul",[a("li",[t._v("协调控制其他子进程（创建，销毁）")]),t._v(" "),a("li",[t._v("浏览器界面显示，用户交互，前进、后退、收藏")]),t._v(" "),a("li",[t._v("将渲染进程得到的内存中的Bitmap，绘制到用户界面上")]),t._v(" "),a("li",[t._v("处理不可见操作，网络请求，文件访问等")])])]),t._v(" "),a("li",[t._v("第三方插件进程\n"),a("ul",[a("li",[t._v("每种类型的插件对应一个进程，仅当使用该插件时才创建")])])]),t._v(" "),a("li",[t._v("GPU进程\n"),a("ul",[a("li",[t._v("用于3D绘制等")])])]),t._v(" "),a("li",[t._v("渲染进程，就是我们说的浏览器内核\n"),a("ul",[a("li",[t._v("负责页面渲染，脚本执行，事件处理等")]),t._v(" "),a("li",[t._v("每个tab页一个渲染进程")])])])]),t._v(" "),a("br"),t._v("\n那么浏览器中包含了这么多的进程，那么对于普通的前端操作来说，最重要的是什么呢？\n"),a("p",[t._v("答案：当然是"),a("font",{attrs:{color:"#dd0000",background:"black"}},[t._v("渲染进程")]),t._v("啦，也就是我们常说的"),a("font",{attrs:{color:"#dd0000",background:"black"}},[t._v("浏览器内核")])],1),t._v(" "),a("h2",{attrs:{id:"浏览器内核（渲染进程）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器内核（渲染进程）"}},[t._v("#")]),t._v(" 浏览器内核（渲染进程）")]),t._v(" "),a("p",[t._v("从前文我们得知，进程和线程是一对多的关系，也就是说一个进程包含了多条线程。\n"),a("br"),a("br"),t._v("\n而对于渲染进程来说，它当然也是多线程的了，接下来我们来看一下渲染进程包含哪些线程。")]),t._v(" "),a("ul",[a("li",[t._v("GUI渲染线程\n"),a("ul",[a("li",[t._v("负责渲染页面，布局和绘制")]),t._v(" "),a("li",[t._v("页面需要重绘和回流时，该线程就会执行")]),t._v(" "),a("li",[t._v("与js引擎线程互斥，防止渲染结果不可预期")])])]),t._v(" "),a("li",[t._v("JS引擎线程\n"),a("ul",[a("li",[t._v("负责处理解析和执行javascript脚本程序")]),t._v(" "),a("li",[t._v("只有一个JS引擎线程（单线程）")]),t._v(" "),a("li",[t._v("与GUI渲染线程互斥，防止渲染结果不可预期")])])]),t._v(" "),a("li",[t._v("事件触发线程\n"),a("ul",[a("li",[t._v("用来控制事件循环（鼠标点击、setTimeout、ajax等）")]),t._v(" "),a("li",[t._v("当事件满足触发条件时，将事件放入到JS引擎所在的执行队列中")])])]),t._v(" "),a("li",[t._v("定时触发器线程\n"),a("ul",[a("li",[t._v("setInterval与setTimeout所在的线程")]),t._v(" "),a("li",[t._v("定时任务并不是由JS引擎计时的，是由定时触发线程来计时的")]),t._v(" "),a("li",[t._v("计时完毕后，通知事件触发线程")])])]),t._v(" "),a("li",[t._v("异步http请求线程\n"),a("ul",[a("li",[t._v("浏览器有一个单独的线程用于处理AJAX请求")]),t._v(" "),a("li",[t._v("当请求完成时，若有回调函数，通知事件触发线程")])])])]),t._v(" "),a("br"),t._v("\n当我们了解了渲染进程包含的这些线程后，我们思考两个问题：\n1、为什么 javascript 是单线程的\n"),a("br"),t._v("\n2、为什么 GUI 渲染线程为什么与 JS 引擎线程互斥\n"),a("h3",{attrs:{id:"为什么-javascript-是单线程的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么-javascript-是单线程的"}},[t._v("#")]),t._v(" 为什么 javascript 是单线程的")]),t._v(" "),a("p",[t._v("首先是历史原因，在创建 javascript 这门语言时，多进程多线程的架构并不流行，硬件支持并不好。"),a("br"),a("br"),t._v("\n其次是因为多线程的复杂性，多线程操作需要加锁，编码的复杂性会增高。"),a("br"),a("br"),t._v("\n而且，如果同时操作 DOM ，在多线程不加锁的情况下，最终会导致 DOM 渲染的结果不可预期。")]),t._v(" "),a("h3",{attrs:{id:"为什么-gui-渲染线程与-js-引擎线程互斥"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么-gui-渲染线程与-js-引擎线程互斥"}},[t._v("#")]),t._v(" 为什么 GUI 渲染线程与 JS 引擎线程互斥")]),t._v(" "),a("p",[t._v("这是由于 JS 是可以操作 DOM 的，如果同时修改元素属性并同时渲染界面(即 JS线程和UI线程同时运行)， 那么渲染线程前后获得的元素就可能不一致了。\n"),a("br"),a("br"),t._v("\n因此，为了防止渲染出现不可预期的结果，浏览器设定 GUI渲染线程和JS引擎线程为互斥关系， 当JS引擎线程执行时GUI渲染线程会被挂起，GUI更新则会被保存在一个队列中等待JS引擎线程空闲时立即被执行。")]),t._v(" "),a("h2",{attrs:{id:"从-event-loop-看-js-的运行机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从-event-loop-看-js-的运行机制"}},[t._v("#")]),t._v(" 从 Event Loop 看 JS 的运行机制")]),t._v(" "),a("p",[t._v("到了这里，终于要进入我们的主题，什么是 Event Loop\n"),a("br"),a("br"),t._v("\n先理解一些概念：\n"),a("br")]),t._v(" "),a("ul",[a("li",[t._v("JS 分为同步任务和异步任务")]),t._v(" "),a("li",[t._v("同步任务都在JS引擎线程上执行，形成一个执行栈")]),t._v(" "),a("li",[t._v("事件触发线程管理一个任务队列，异步任务触发条件达成，将回调事件放到任务队列中")]),t._v(" "),a("li",[t._v("执行栈中所有同步任务执行完毕，此时JS引擎线程空闲，系统会读取任务队列，将可运行的异步任务回调事件添加到执行栈中，开始执行")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/24/16dfe514e724df5f?w=774&h=437&f=png&s=74678",alt:""}})]),t._v(" "),a("br"),t._v("\n在前端开发中我们会通过setTimeout/setInterval来指定定时任务，会通过XHR/fetch发送网络请求， 接下来简述一下setTimeout/setInterval和XHR/fetch到底做了什么事\n"),a("br"),a("br"),t._v("\n我们知道，不管是setTimeout/setInterval和XHR/fetch代码，在这些代码执行时， 本身是同步任务，而其中的回调函数才是异步任务。\n"),a("br"),a("br"),t._v("\n当代码执行到setTimeout/setInterval时，实际上是JS引擎线程通知定时触发器线程，间隔一个时间后，会触发一个回调事件， 而定时触发器线程在接收到这个消息后，会在等待的时间后，将回调事件放入到由事件触发线程所管理的事件队列中。\n"),a("br"),a("br"),t._v("\n当代码执行到XHR/fetch时，实际上是JS引擎线程通知异步http请求线程，发送一个网络请求，并制定请求完成后的回调事件， 而异步http请求线程在接收到这个消息后，会在请求成功后，"),a("font",{attrs:{color:"#dd0000",background:"black"}},[t._v("将回调事件放入到由事件触发线程所管理的事件队列中。")]),t._v(" "),a("br"),a("br"),t._v("\n当我们的同步任务执行完，JS引擎线程会询问事件触发线程，在事件队列中是否有待执行的回调函数，如果有就会加入到执行栈中交给JS引擎线程执行\n"),a("br"),a("br"),t._v("\n用一张图来解释：\n"),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/24/16dfe54f9781b4cf?w=726&h=463&f=png&s=78752",alt:""}}),t._v("\n再用代码来解释一下：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("timerCallback")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'wait one second'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("httpCallback")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'get server data success'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n同步任务\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n同步任务\n通知定时器线程 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("s 后将 timerCallback 交由事件触发线程处理\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("s 后事件触发线程将 timerCallback 加入到事件队列中\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timerCallback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n同步任务\n通知异步http请求线程发送网络请求，请求成功后将 httpCallback 交由事件触发线程处理\n\n请求成功后事件触发线程将 httpCallback 加入到事件队列中\n$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'www. xxxx. com'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" httpCallback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n同步任务\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'world'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n所有同步任务执行完后\n询问事件触发线程在事件事件队列中是否有需要执行的回调函数\n如果没有，一直询问，直到有为止\n如果有，将回调事件加入执行栈中，开始执行回调代码\n")])])]),a("p",[t._v("总结一下：")]),t._v(" "),a("ul",[a("li",[t._v("JS引擎线程只执行执行栈中的事件")]),t._v(" "),a("li",[t._v("执行栈中的代码执行完毕，就会读取事件队列中的事件")]),t._v(" "),a("li",[t._v("事件队列中的回调事件，是由各自线程插入到事件队列中的")]),t._v(" "),a("li",[t._v("如此循环")])]),t._v(" "),a("h2",{attrs:{id:"宏任务、微任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#宏任务、微任务"}},[t._v("#")]),t._v(" 宏任务、微任务")]),t._v(" "),a("p",[t._v("当我们基本了解了什么是执行栈，什么是事件队列之后，我们深入了解一下事件循环中宏任务、微任务")]),t._v(" "),a("h3",{attrs:{id:"什么是宏任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是宏任务"}},[t._v("#")]),t._v(" 什么是宏任务")]),t._v(" "),a("p",[t._v("我们可以将每次执行栈执行的代码当做是一个宏任务（包括每次从事件队列中获取一个事件回调并放到执行栈中执行）， 每一个宏任务会从头到尾执行完毕，不会执行其他。")]),t._v(" "),a("p",[t._v("我们前文提到过JS引擎线程和GUI渲染线程是互斥的关系，浏览器为了能够使宏任务和DOM任务有序的进行，会在一个宏任务执行结果后，在下一个宏任务执行前，GUI渲染线程开始工作，对页面进行渲染。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 宏任务--\x3e渲染--\x3e宏任务--\x3e渲染--\x3e渲染．．．")]),t._v("\n")])])]),a("p",[t._v("主代码块，setTimeout，setInterval等，都属于宏任务\n"),a("br"),a("br"),t._v(" "),a("strong",[t._v("第一个例子")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" style "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'background:black'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" style "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'background:red'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" style "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'background:blue'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" style "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'background:grey'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),a("p",[t._v("我们可以将这段代码放到浏览器的控制台执行以下，看一下效果：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/8/20/16caca3e44d7d357?imageslim",alt:""}}),t._v("\n我们会看到的结果是，页面背景会在瞬间变成灰色，以上代码属于同一次宏任务，所以全部执行完才触发页面渲染，渲染时GUI线程会将所有UI改动优化合并，所以视觉效果上，只会看到页面变成灰色。\n"),a("br"),a("br"),t._v(" "),a("strong",[t._v("第二个例子")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" style "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'background:blue'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'background:black'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("执行一下，再看效果：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/8/20/16caca3ed44e6b16?imageslim",alt:""}}),t._v("\n我会看到，页面先显示成蓝色背景，然后瞬间变成了黑色背景，这是因为以上代码属于两次宏任务，第一次宏任务执行的代码是将背景变成蓝色，然后触发渲染，将页面变成蓝色，再触发第二次宏任务将背景变成黑色。")]),t._v(" "),a("h2",{attrs:{id:"什么是微任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是微任务"}},[t._v("#")]),t._v(" 什么是微任务")]),t._v(" "),a("p",[t._v("我们已经知道宏任务结束后，会执行渲染，然后执行下一个宏任务， 而微任务可以理解成在当前宏任务执行后立即执行的任务。")]),t._v(" "),a("p",[t._v("也就是说，当宏任务执行完，会在渲染前，将执行期间所产生的所有微任务都执行完。")]),t._v(" "),a("p",[t._v("Promise，process. nextTick等，属于微任务。")]),t._v(" "),a("p",[a("strong",[t._v("第一个例子")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" style "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'background:blue'")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nPromise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n    document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'background:black'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),a("p",[t._v("执行一下，再看效果：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/8/20/16cad85d2378ccb5?imageslim",alt:""}}),t._v("\n控制台输出 1 3 2 , 是因为 promise 对象的 then 方法的回调函数是异步执行，所以 2 最后输出")]),t._v(" "),a("p",[t._v("页面的背景色直接变成黑色，没有经过蓝色的阶段，是因为，我们在宏任务中将背景设置为蓝色，但在进行渲染前执行了微任务， 在微任务中将背景变成了黑色，然后才执行的渲染")]),t._v(" "),a("p",[a("strong",[t._v("第二个例子")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// print : 1 3 2")]),t._v("\n")])])]),a("p",[t._v("上面代码共包含两个 setTimeout ，也就是说除主代码块外，共有两个宏任务，\n其中第一个宏任务执行中，输出 1 ，并且创建了微任务队列，所以在下一个宏任务队列执行前，\n先执行微任务，在微任务执行中，输出 3 ，微任务执行后，执行下一次宏任务，执行中输出 2")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[t._v("执行一个宏任务（栈中没有就从事件队列中获取）")]),t._v(" "),a("li",[t._v("执行过程中如果遇到微任务，就将它添加到微任务的任务队列中")]),t._v(" "),a("li",[t._v("宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行")])]),t._v(" "),a("p",[t._v("当前宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染）")]),t._v(" "),a("ul",[a("li",[t._v("渲染完毕后，JS线程继续接管，开始下一个宏任务（从事件队列中获取）")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/25/16e0084a825be830?w=389&h=601&f=png&s=48214",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.jianshu.com/p/1e455a9226ce",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器都包含哪些进程"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("进程与线程的一个简单解释"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.cnblogs.com/lhb25/p/how-browsers-work.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入解析浏览器的幕后工作原理"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000008015671",target:"_blank",rel:"noopener noreferrer"}},[t._v("一篇文章说清浏览器解析和CSS（GPU）动画优化"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"写在最后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写在最后"}},[t._v("#")]),t._v(" 写在最后")]),t._v(" "),a("p",[t._v("看到这里，不知道对JS的运行机制是不是更加理解了，从头到尾梳理，而不是就某一个碎片化知识应该是会更清晰的吧？")]),t._v(" "),a("p",[t._v("同时，也应该注意到了JS根本就没有想象的那么简单，前端的知识也是无穷无尽，层出不穷的概念、N多易忘的知识点、各式各样的框架、 底层原理方面也是可以无限的往下深挖，然后你就会发现，你知道的太少了。。。")]),t._v(" "),a("p",[t._v("最后，喜欢的话，就请给个赞吧！")])],1)}),[],!1,null,null,null);s.default=r.exports}}]);
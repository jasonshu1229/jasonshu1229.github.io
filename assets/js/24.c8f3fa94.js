(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{238:function(e,l,a){"use strict";a.r(l);var r=a(0),t=Object(r.a)({},(function(){var e=this,l=e.$createElement,a=e._self._c||l;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"_1-loader和plugin的区别是什么？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-loader和plugin的区别是什么？"}},[e._v("#")]),e._v(" 1.Loader和Plugin的区别是什么？")]),e._v(" "),a("p",[a("b",[e._v("1.作用不同:")])]),e._v(" "),a("ul",[a("li",[e._v('Loader直译为"加载器"。Webpack将一切文件视为模块，但是webpack原生是只能解析js文件，如果想将其他文件也打包的话，就会用到loader。 所以Loader的作用是让webpack拥有了加载和解析非JavaScript文件的能力。'),a("br"),a("br")]),e._v(" "),a("li",[e._v('Plugin直译为"插件"。Plugin可以扩展webpack的功能，让webpack具有更多的灵活性。 在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。\n'),a("br")])]),e._v(" "),a("p",[a("b",[e._v("2.用法不同:")])]),e._v(" "),a("ul",[a("li",[e._v("Loader在module.rules中配置，也就是说作为模块的解析规则而存在。 类型为数组，每一项都是一个Object，里面描述了对于什么类型的文件（test），使用什么加载(loader)和使用的参数（options）"),a("br"),a("br")]),e._v(" "),a("li",[e._v("Plugin在plugins中单独配置。 类型为数组，每一项是一个plugin的实例，参数都通过构造函数传入。")])])])}),[],!1,null,null,null);l.default=t.exports}}]);